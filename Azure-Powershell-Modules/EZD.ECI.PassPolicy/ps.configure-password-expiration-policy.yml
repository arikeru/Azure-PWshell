name: "Entra: Configure Entra ID Password Expiration Policies"

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Environment to deploy to
        options:
          - sumvita-gov
          - sumvita
          - kalvico
      execute:
        required: true
        type: boolean
        description: Execute change
        default: false
      password_policy:
        required: true 
        type: choice
        description: password policy setting
        options:
          - None
          - DisablePasswordExpiration


permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_USE_OIDC: true
  ARM_USE_AZUREAD: true
  ARM_ENVIRONMENT: ${{ vars.TF_BACKEND_CONFIG_ENVIRONMENT }}
  ARM_SUBSCRIPTION_ID: ${{ vars.TFSTATE_AZURE_SUBSCRIPTION_ID }}

jobs: 
  run-powershell-script:
    environment: ${{ inputs.environment }}
    name: "Password Expiration Policy"
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout feature module
        uses: actions/checkout@v4
        with:
          repository: 'EasyDynamics/EntraID-800-53-Terraform-Modules'
          ref: '1.0'
          path: 'EZD.ECI.EntraUserPasswordExpiration'
          sparse-checkout: 'powershell-modules/EZD.ECI.EntraUserPasswordExpiration'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}

      - name: Checkout common module
        uses: actions/checkout@v4
        with:
          repository: 'EasyDynamics/EntraID-800-53-Terraform-Modules'
          ref: '0.0.95'
          path: 'EZD.ECI.Common'
          sparse-checkout: 'powershell-modules/EZD.ECI.Common'
          ssh-key: ${{ secrets.MODULES_REPO_SSH_PRIVATE_KEY }}
          
      - name: Configure Entra ID Password Expiration Settings
        shell: pwsh
        run: |
          if ("${{ vars.IS_AZURE_GOV }}" -eq "true") {
            az cloud set --name AzureUSGovernment
            $GRAPH_ENVIRONMENT = 'USGov'
          } else {
            $GRAPH_ENVIRONMENT = 'Global'
          }
          az login --service-principal -u ${{ vars.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ vars.AZURE_TENANT_ID }}
          $AccessToken = (az account get-access-token --resource-type ms-graph | ConvertFrom-Json).accessToken
          
          Write-Output "Connecting to MgGraph..."
          $SecureAccessToken = ConvertTo-SecureString -String $AccessToken -AsPlainText -Force
          Connect-MgGraph -AccessToken $SecureAccessToken -NoWelcome -Environment $GRAPH_ENVIRONMENT

          # Install Microsoft.Graph.Users module if not already installed
          if (-Not (Get-InstalledModule -Name "Microsoft.Graph.Users" -ErrorAction SilentlyContinue)) {
            Write-Output "Installing Microsoft.Graph.Users module..."
            Install-Module -Name "Microsoft.Graph.Users" -Scope CurrentUser -Force
          }

          # Verify that the required Microsoft Graph User module is installed
          if (-Not (Get-InstalledModule -Name "Microsoft.Graph.Users" -ErrorAction SilentlyContinue)) {
            Write-Error "Microsoft.Graph.Users module is not installed. Please install it before running this workflow."
            exit 1
          }

          # Import the Microsoft.Graph.Users module into the session
          Import-Module -Name "Microsoft.Graph.Users" -Force

          # Import custom modules
          Import-Module .\EZD.ECI.Common\powershell-modules\EZD.ECI.Common\EZD.ECI.Common.psm1 -Force
          Import-Module .\EZD.ECI.EntraUserPasswordExpiration\powershell-modules\EZD.ECI.EntraUserPasswordExpiration\YourModuleName.psm1 -Force

          # Define variables
          $PasswordPolicy = "${{ github.event.inputs.password_policy }}"
          $ExecuteChange = [System.Convert]::ToBoolean("${{ github.event.inputs.execute }}")

          # Configure Entra ID password expiration settings
          Set-PasswordPolicy -PasswordPolicy $PasswordPolicy -ExecuteChange:$ExecuteChange